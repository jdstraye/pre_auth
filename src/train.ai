from pathlib import Path
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
import joblib
import logging
import numpy as np

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# === Helper Functions ===
def preprocess_data(df, feature_cols, categorical_cols=None):
    """Preprocess data: handle categorical variables and missing values."""
    df = df.copy()
    
    # Handle categorical columns
    if categorical_cols:
        for col in categorical_cols:
            if col in df.columns:
                le = LabelEncoder()
                df[col] = le.fit_transform(df[col].astype(str))
                logger.info(f"Encoded categorical column: {col}")
    
    # Handle missing values (simple imputation)
    for col in feature_cols:
        if col in df.columns:
            if df[col].dtype in [np.float64, np.int64]:
                df[col] = df[col].fillna(df[col].mean())
            else:
                df[col] = df[col].fillna(df[col].mode()[0])
    
    return df

# === Load data ===
try:
    train_df = pd.read_csv("data/train_20250821.1126.csv")
    test_df = pd.read_csv("data/test_20250821.1126.csv")
except FileNotFoundError as e:
    logger.error(f"Error loading data: {e}")
    raise

# Define feature columns
feature_cols = [
    "user_initials",
    "DebtToIncome",
    "Automatic Financing_Score",
    "Automatic Financing_below_600?",
    "Automatic Financing_Status_Approved?",
    "Automatic Financing_Status_Declined?",
    "Automatic Financing_Amount",
    "Automatic Financing_Details_in_the_wallet?",
    "Automatic Financing_Details_just_available?",
    "Automatic Financing_DebtToIncome",
    "0% Unsecured Funding_missing?",
    "0% Unsecured Funding_Score",
    "0% Unsecured Funding_below_600?",
    "Unsecured Funding_Status_As_is?",
    "Unsecured Funding_Status_Declined?",
    "Unsecured Funding_Status_if_Fixed?",
    "Unsecured Funding_Status_NA?",
    "0% Unsecured Funding_Amount",
    "0% Unsecured Funding_Details_To_book?",
    "0% Unsecured Funding_Details_just_CL?",
    "0% Unsecured Funding_Details_NA?",
    "0% Unsecured Funding_Collections",
    "0% Unsecured Funding_Contingencies",
    "0% Unsecured Funding_DebtToIncome",
    "Debt Resolution_missing?",
    "Debt Resolution_Score",
    "Debt Resolution_score_missing?",
    "Debt Resolution_below_600?",
    "Debt Resolution_Status_Approved?",
    "Debt Resolution_Status_Declined?",
    "Debt Resolution_Status_NA?",
    "Debt Resolution_Amount",
    "Debt Resolution_DebtToIncome",
]

# Identify categorical columns (modify based on your data)
categorical_cols = ["user_initials"]  # Add other categorical columns if needed

# Preprocess data
try:
    train_df = preprocess_data(train_df, feature_cols, categorical_cols)
    test_df = preprocess_data(test_df, feature_cols, categorical_cols)
except Exception as e:
    logger.error(f"Error preprocessing data: {e}")
    raise

# === Phase 1: Status Model ===
X_train_status = train_df[feature_cols]
y_train_status = train_df["final_contract_status_label"]

X_test_status = test_df[feature_cols]
y_test_status = test_df["final_contract_status_label"]

if X_train_status.empty or X_test_status.empty:
    logger.error("Empty training or test set for status model.")
    raise ValueError("Empty training or test set for status model.")

status_model = RandomForestClassifier(
    n_estimators=500,
    random_state=42,
    n_jobs=-1,
    class_weight="balanced"
)
status_model.fit(X_train_status, y_train_status)

y_pred_status = status_model.predict(X_test_status)
logger.info(f"Status Model Accuracy: {accuracy_score(y_test_status, y_pred_status)}")
logger.info(f"Classification Report:\n{classification_report(y_test_status, y_pred_status, zero_division=0)}")

# === Phase 2: Tier Model (only Approved) ===
train_approved = train_df[train_df["final_contract_status_label"] == 0]
test_approved = test_df[test_df["final_contract_status_label"] == 0]

if train_approved.empty or test_approved.empty:
    logger.warning("No approved contracts found for tier model training/testing.")
else:
    X_train_tier = train_approved[feature_cols]
    y_train_tier = train_approved["final_contract_tier_label"]

    X_test_tier = test_approved[feature_cols]
    y_test_tier = test_approved["final_contract_tier_label"]

    tier_model = RandomForestClassifier(
        n_estimators=500,
        random_state=42,
        n_jobs=-1,
        class_weight="balanced"
    )
    tier_model.fit(X_train_tier, y_train_tier)

    y_pred_tier = tier_model.predict(X_test_tier)
    logger.info(f"Tier Model Accuracy: {accuracy_score(y_test_tier, y_pred_tier)}")
    logger.info(f"Classification Report:\n{classification_report(y_test_tier, y_pred_tier, zero_division=0)}")

# === Save both models ===
Path("models").mkdir(exist_ok=True)
joblib.dump(status_model, "models/status_model.pkl")
if not train_approved.empty:
    joblib.dump(tier_model, "models/tier_model.pkl")
    logger.info("✅ Both models saved.")
else:
    logger.info("✅ Status model saved. Tier model not saved due to no approved contracts.")